{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","id","value","text","onChange","event","updateItem","target","icon","onClick","deleteItem","easing","duration","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","console","log","newItems","filteredItems","filter","onSubmit","this","type","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAoCeA,MA/Bf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BACEC,GAAIH,EAAKE,IACTE,MAAOJ,EAAKK,KACZC,SAAU,SAACC,GAAD,OAAWX,EAAMY,WAAWD,EAAME,OAAOL,MAAOJ,EAAKE,QAEjE,8BACE,kBAAC,IAAD,CACED,UAAU,UACVS,KAAK,QACLC,QAAS,kBAAMf,EAAMgB,WAAWZ,EAAKE,cAOjD,OACE,6BACE,kBAAC,IAAD,CAAUW,OAAO,cAAcC,SAAU,KACtCjB,K,eCxBTkB,IAAQC,IAAIC,K,IAkFGC,E,kDA/Eb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAURuB,YAAc,SAACZ,GACb,EAAKa,SAAS,CACZC,YAAa,CACXhB,KAAME,EAAME,OAAOL,MACnBF,IAAKoB,KAAKC,UAfG,EAoBnBC,QAAU,SAACjB,GACTA,EAAMkB,iBACN,IAAMC,EAAU,EAAKC,MAAMN,YAE3B,GADAO,QAAQC,IAAIH,GACS,KAAjBA,EAAQrB,KAAa,CACvB,IAAMyB,EAAQ,sBAAO,EAAKH,MAAM7B,OAAlB,CAAyB4B,IACvC,EAAKN,SAAS,CACZtB,MAAOgC,EACPT,YAAa,CACXhB,KAAM,GACNH,IAAK,QA9BM,EAoCnBU,WAAa,SAACV,GACZ,IAAM6B,EAAgB,EAAKJ,MAAM7B,MAAMkC,QAAO,SAAChC,GAAD,OAAUA,EAAKE,MAAQA,KACrE,EAAKkB,SAAS,CACZtB,MAAOiC,KAvCQ,EA2CnBvB,WAAa,SAACH,EAAMH,GAClB,IAAMJ,EAAQ,EAAK6B,MAAM7B,MACzBA,EAAMC,KAAI,SAACC,GACLA,EAAKE,MAAQA,IACfF,EAAKK,KAAOA,MAGhB,EAAKe,SAAS,CACZtB,MAAOA,KAjDT,EAAK6B,MAAQ,CACX7B,MAAO,GACPuB,YAAa,CACXhB,KAAM,GACNH,IAAK,KANQ,E,qDAwDjB,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAME,GAAG,aAAa8B,SAAUC,KAAKV,SACnC,2BACEW,KAAK,OACLC,YAAY,aACZhC,MAAO8B,KAAKP,MAAMN,YAAYhB,KAC9BC,SAAU4B,KAAKf,cAEjB,4BAAQgB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACErC,MAAOoC,KAAKP,MAAM7B,MAClBc,WAAYsB,KAAKtB,WACjBJ,WAAY0B,KAAK1B,kB,GAzET6B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.e57817f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItems.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Flipmove from \"react-flip-move\";\r\n\r\nfunction ListItems(props) {\r\n  const items = props.items;\r\n  const listItems = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <input\r\n            id={item.key}\r\n            value={item.text}\r\n            onChange={(event) => props.updateItem(event.target.value, item.key)}\r\n          />\r\n          <span>\r\n            <FontAwesomeIcon\r\n              className=\"faicons\"\r\n              icon=\"trash\"\r\n              onClick={() => props.deleteItem(item.key)}\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <Flipmove easing=\"ease-in-out\" duration={500}>\r\n        {listItems}\r\n      </Flipmove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItems from \"./ListItems\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n  }\n\n  handleInput = (event) => {\n    this.setState({\n      currentItem: {\n        text: event.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n\n  addItem = (event) => {\n    event.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n\n  deleteItem = (key) => {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({\n      items: filteredItems,\n    });\n  };\n\n  updateItem = (text, key) => {\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) {\n        item.text = text;\n      }\n    });\n    this.setState({\n      items: items,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter Text\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <ListItems\n          items={this.state.items}\n          deleteItem={this.deleteItem}\n          updateItem={this.updateItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}